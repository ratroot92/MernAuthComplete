{"ast":null,"code":"export default {\n  login: user => {\n    console.log(\" %c *** login[user/login][POST] *** \", \"font-size: 12px; font-weight: bold;color:green\");\n    console.log({\n      user\n    });\n    let username = user[\"username\"][0];\n    let password = user[\"password\"][0];\n    return fetch(\"user/login\", {\n      method: \"post\",\n      body: JSON.stringify({\n        username: username,\n        password: password\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.status !== 401) {\n        return res.json().then(data => data);\n      } else {\n        return {\n          isAuthenticated: false,\n          user: {\n            username: \"\",\n            role: \"\"\n          }\n        };\n      }\n    });\n  },\n  register: user => {\n    console.log(\" %c *** register[user/register][POST] *** \", \"font-size: 12px; font-weight: bold;color:green\");\n    return fetch(\"user/register\", {\n      method: \"post\",\n      body: JSON.stringify(user),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => data);\n  },\n  logout: () => {\n    console.log(\" %c *** logout[user/login][POST] *** \", \"font-size: 12px; font-weight: bold;color:green\");\n    return fetch(\"/user/logout\").then(res => res.json()).then(data => data);\n  },\n\n  /*\n  ! Sync backend and frontend (even after browser closes)\n  ! call this function with context API\n  */\n  isAuthenticated: () => {\n    return fetch(\"user/authenticated\").then(res => {\n      console.log(\" %c *** isAuthenticated[user/authenticated][GET] *** \", \"font-size: 12px; font-weight: bold;color:green\");\n\n      if (res.status !== 401) {\n        return res.json().then(data => data);\n      } else {\n        return {\n          isAuthenticated: false,\n          user: {\n            username: \"\",\n            role: \"\"\n          }\n        };\n      }\n    }).then(data => data);\n  }\n};","map":{"version":3,"sources":["/home/hadooop/Desktop/development/reactjs_project/MernAuth/react/src/services/AuthService.jsx"],"names":["login","user","console","log","username","password","fetch","method","body","JSON","stringify","headers","then","res","status","json","data","isAuthenticated","role","register","logout"],"mappings":"AAAA,eAAe;AACbA,EAAAA,KAAK,EAAGC,IAAD,IAAU;AACfC,IAAAA,OAAO,CAACC,GAAR,CACE,sCADF,EAEE,gDAFF;AAIAD,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,MAAAA;AAAF,KAAZ;AACA,QAAIG,QAAQ,GAAGH,IAAI,CAAC,UAAD,CAAJ,CAAiB,CAAjB,CAAf;AACA,QAAII,QAAQ,GAAGJ,IAAI,CAAC,UAAD,CAAJ,CAAiB,CAAjB,CAAf;AAEA,WAAOK,KAAK,CAAC,YAAD,EAAe;AACzBC,MAAAA,MAAM,EAAE,MADiB;AAEzBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBN,QAAAA,QAAQ,EAAEA,QADS;AAEnBC,QAAAA,QAAQ,EAAEA;AAFS,OAAf,CAFmB;AAMzBM,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AANgB,KAAf,CAAL,CASJC,IATI,CASEC,GAAD,IAAS;AACf,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,eAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAiBI,IAAD,IAAUA,IAA1B,CAAP;AACD,OAFD,MAEO;AACL,eAAO;AAAEC,UAAAA,eAAe,EAAE,KAAnB;AAA0BhB,UAAAA,IAAI,EAAE;AAAEG,YAAAA,QAAQ,EAAE,EAAZ;AAAgBc,YAAAA,IAAI,EAAE;AAAtB;AAAhC,SAAP;AACD;AACF,KAfM,CAAP;AAgBD,GA1BY;AA4BbC,EAAAA,QAAQ,EAAGlB,IAAD,IAAU;AAClBC,IAAAA,OAAO,CAACC,GAAR,CACE,4CADF,EAEE,gDAFF;AAIA,WAAOG,KAAK,CAAC,eAAD,EAAkB;AAC5BC,MAAAA,MAAM,EAAE,MADoB;AAE5BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf,CAFsB;AAG5BU,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHmB,KAAlB,CAAL,CAOJC,IAPI,CAOEC,GAAD,IAASA,GAAG,CAACE,IAAJ,EAPV,EAQJH,IARI,CAQEI,IAAD,IAAUA,IARX,CAAP;AASD,GA1CY;AA4CbI,EAAAA,MAAM,EAAE,MAAM;AACZlB,IAAAA,OAAO,CAACC,GAAR,CACE,uCADF,EAEE,gDAFF;AAIA,WAAOG,KAAK,CAAC,cAAD,CAAL,CACJM,IADI,CACEC,GAAD,IAASA,GAAG,CAACE,IAAJ,EADV,EAEJH,IAFI,CAEEI,IAAD,IAAUA,IAFX,CAAP;AAGD,GApDY;;AAqDb;;;;AAIAC,EAAAA,eAAe,EAAE,MAAM;AACrB,WAAOX,KAAK,CAAC,oBAAD,CAAL,CACJM,IADI,CACEC,GAAD,IAAS;AACbX,MAAAA,OAAO,CAACC,GAAR,CACE,uDADF,EAEE,gDAFF;;AAIA,UAAIU,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,eAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAiBI,IAAD,IAAUA,IAA1B,CAAP;AACD,OAFD,MAEO;AACL,eAAO;AAAEC,UAAAA,eAAe,EAAE,KAAnB;AAA0BhB,UAAAA,IAAI,EAAE;AAAEG,YAAAA,QAAQ,EAAE,EAAZ;AAAgBc,YAAAA,IAAI,EAAE;AAAtB;AAAhC,SAAP;AACD;AACF,KAXI,EAYJN,IAZI,CAYEI,IAAD,IAAUA,IAZX,CAAP;AAaD;AAvEY,CAAf","sourcesContent":["export default {\n  login: (user) => {\n    console.log(\n      \" %c *** login[user/login][POST] *** \",\n      \"font-size: 12px; font-weight: bold;color:green\"\n    );\n    console.log({ user });\n    let username = user[\"username\"][0];\n    let password = user[\"password\"][0];\n\n    return fetch(\"user/login\", {\n      method: \"post\",\n      body: JSON.stringify({\n        username: username,\n        password: password,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }).then((res) => {\n      if (res.status !== 401) {\n        return res.json().then((data) => data);\n      } else {\n        return { isAuthenticated: false, user: { username: \"\", role: \"\" } };\n      }\n    });\n  },\n\n  register: (user) => {\n    console.log(\n      \" %c *** register[user/register][POST] *** \",\n      \"font-size: 12px; font-weight: bold;color:green\"\n    );\n    return fetch(\"user/register\", {\n      method: \"post\",\n      body: JSON.stringify(user),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => data);\n  },\n\n  logout: () => {\n    console.log(\n      \" %c *** logout[user/login][POST] *** \",\n      \"font-size: 12px; font-weight: bold;color:green\"\n    );\n    return fetch(\"/user/logout\")\n      .then((res) => res.json())\n      .then((data) => data);\n  },\n  /*\n! Sync backend and frontend (even after browser closes)\n! call this function with context API\n*/\n  isAuthenticated: () => {\n    return fetch(\"user/authenticated\")\n      .then((res) => {\n        console.log(\n          \" %c *** isAuthenticated[user/authenticated][GET] *** \",\n          \"font-size: 12px; font-weight: bold;color:green\"\n        );\n        if (res.status !== 401) {\n          return res.json().then((data) => data);\n        } else {\n          return { isAuthenticated: false, user: { username: \"\", role: \"\" } };\n        }\n      })\n      .then((data) => data);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}