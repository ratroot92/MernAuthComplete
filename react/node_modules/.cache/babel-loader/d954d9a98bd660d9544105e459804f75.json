{"ast":null,"code":"export default{getTodos:function getTodos(){return fetch(\"user/todos\").then(function(res){if(res.status!==401){return res.json().then(function(data){return data;});}else{return{message:{msgBody:\"unAuthorized\"},msgError:true};}});},postTodo:function postTodo(todo){return fetch(\"user/todo\",{method:\"post\",body:JSON.stringify(todo),headers:{\"Content-Type\":\"application/json\"}}).then(function(res){if(res.status!==401){return res.json().then(function(data){return data;});}else{return{message:{msgBody:\"unAuthorized\"},msgError:true};}});}};","map":{"version":3,"sources":["/home/hadooop/Desktop/development/MERN/MernAuth/react/src/services/TodoService.js"],"names":["getTodos","fetch","then","res","status","json","data","message","msgBody","msgError","postTodo","todo","method","body","JSON","stringify","headers"],"mappings":"AAAA,cAAe,CACbA,QAAQ,CAAE,mBAAM,CACd,MAAOC,CAAAA,KAAK,CAAC,YAAD,CAAL,CAAoBC,IAApB,CAAyB,SAACC,GAAD,CAAS,CACvC,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACtB,MAAOD,CAAAA,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgB,SAACI,IAAD,QAAUA,CAAAA,IAAV,EAAhB,CAAP,CACD,CAFD,IAEO,CACL,MAAO,CAAEC,OAAO,CAAE,CAAEC,OAAO,CAAE,cAAX,CAAX,CAAwCC,QAAQ,CAAE,IAAlD,CAAP,CACD,CACF,CANM,CAAP,CAOD,CATY,CAWbC,QAAQ,CAAE,kBAACC,IAAD,CAAU,CAClB,MAAOV,CAAAA,KAAK,CAAC,WAAD,CAAc,CACxBW,MAAM,CAAE,MADgB,CAExBC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAFkB,CAGxBK,OAAO,CAAE,CACP,eAAgB,kBADT,CAHe,CAAd,CAAL,CAMJd,IANI,CAMC,SAACC,GAAD,CAAS,CACf,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACtB,MAAOD,CAAAA,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgB,SAACI,IAAD,QAAUA,CAAAA,IAAV,EAAhB,CAAP,CACD,CAFD,IAEO,CACL,MAAO,CAAEC,OAAO,CAAE,CAAEC,OAAO,CAAE,cAAX,CAAX,CAAwCC,QAAQ,CAAE,IAAlD,CAAP,CACD,CACF,CAZM,CAAP,CAaD,CAzBY,CAAf","sourcesContent":["export default {\n  getTodos: () => {\n    return fetch(\"user/todos\").then((res) => {\n      if (res.status !== 401) {\n        return res.json().then((data) => data);\n      } else {\n        return { message: { msgBody: \"unAuthorized\" }, msgError: true };\n      }\n    });\n  },\n\n  postTodo: (todo) => {\n    return fetch(\"user/todo\", {\n      method: \"post\",\n      body: JSON.stringify(todo),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }).then((res) => {\n      if (res.status !== 401) {\n        return res.json().then((data) => data);\n      } else {\n        return { message: { msgBody: \"unAuthorized\" }, msgError: true };\n      }\n    });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}